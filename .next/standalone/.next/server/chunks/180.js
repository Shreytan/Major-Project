"use strict";exports.id=180,exports.ids=[180],exports.modules={180:(a,b,c)=>{c.d(b,{walletManager:()=>i});var d=c(4448),e=c(7987),f=c(3572),g=c.n(f);class h{async connect(){try{let a=await g()();if(!a)throw Error("MetaMask not found! Please install MetaMask.");let b=await a.request({method:"eth_requestAccounts"});if(!b||0===b.length)throw Error("No accounts found!");let c=b[0];return this.provider=new d.k(a),this.signer=await this.provider.getSigner(),{isConnected:!0,address:c,provider:this.provider,signer:this.signer}}catch(a){throw console.error("Error connecting wallet:",a),a}}async disconnect(){return this.provider=null,this.signer=null,{isConnected:!1,address:null,provider:null,signer:null}}async getBalance(a){if(!this.provider)throw Error("Provider not connected");let b=await this.provider.getBalance(a);return e.ck(b)}async switchNetwork(a){if(!this.provider)throw Error("Provider not connected");try{await this.provider.send("wallet_switchEthereumChain",[{chainId:a}])}catch(b){if(4902===b.code)await this.addNetwork(a);else throw b}}async addNetwork(a){let b=this.getNetworkConfig(a);await this.provider?.send("wallet_addEthereumChain",[b])}getNetworkConfig(a){return({"0x1":{chainId:"0x1",chainName:"Ethereum Mainnet",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},rpcUrls:["https://mainnet.infura.io/v3/"],blockExplorerUrls:["https://etherscan.io"]},"0x5":{chainId:"0x5",chainName:"Goerli Testnet",nativeCurrency:{name:"Goerli Ether",symbol:"ETH",decimals:18},rpcUrls:["https://goerli.infura.io/v3/"],blockExplorerUrls:["https://goerli.etherscan.io"]},"0xaa36a7":{chainId:"0xaa36a7",chainName:"Sepolia Testnet",nativeCurrency:{name:"Sepolia Ether",symbol:"ETH",decimals:18},rpcUrls:["https://sepolia.infura.io/v3/"],blockExplorerUrls:["https://sepolia.etherscan.io"]}})[a]}getProvider(){return this.provider}getSigner(){return this.signer}constructor(){this.provider=null,this.signer=null}}let i=new h}};