"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_wallet_ts";
exports.ids = ["_ssr_src_lib_wallet_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/wallet.ts":
/*!***************************!*\
  !*** ./src/lib/wallet.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

<<<<<<< HEAD:Major-Frontend/.next/server/_ssr_src_lib_wallet_ts.js
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletManager: () => (/* binding */ WalletManager),\n/* harmony export */   walletManager: () => (/* binding */ walletManager)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @metamask/detect-provider */ \"(ssr)/./node_modules/@metamask/detect-provider/dist/index.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass WalletManager {\n    async connect() {\n        try {\n            // Detect MetaMask provider\n            const ethereum = await _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default()();\n            if (!ethereum) {\n                throw new Error('MetaMask not found! Please install MetaMask.');\n            }\n            // Request account access\n            const accounts = await ethereum.request({\n                method: 'eth_requestAccounts'\n            });\n            if (!accounts || accounts.length === 0) {\n                throw new Error('No accounts found!');\n            }\n            const account = accounts[0];\n            // Create provider and signer\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            this.signer = await this.provider.getSigner();\n            return {\n                isConnected: true,\n                address: account,\n                provider: this.provider,\n                signer: this.signer\n            };\n        } catch (error) {\n            console.error('Error connecting wallet:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        this.provider = null;\n        this.signer = null;\n        return {\n            isConnected: false,\n            address: null,\n            provider: null,\n            signer: null\n        };\n    }\n    async getBalance(address) {\n        if (!this.provider) {\n            throw new Error('Provider not connected');\n        }\n        const balance = await this.provider.getBalance(address);\n        return ethers__WEBPACK_IMPORTED_MODULE_2__.formatEther(balance);\n    }\n    async switchNetwork(chainId) {\n        if (!this.provider) {\n            throw new Error('Provider not connected');\n        }\n        try {\n            await this.provider.send('wallet_switchEthereumChain', [\n                {\n                    chainId\n                }\n            ]);\n        } catch (error) {\n            // If the network doesn't exist, add it\n            if (error.code === 4902) {\n                await this.addNetwork(chainId);\n            } else {\n                throw error;\n            }\n        }\n    }\n    async addNetwork(chainId) {\n        const networkConfig = this.getNetworkConfig(chainId);\n        await this.provider?.send('wallet_addEthereumChain', [\n            networkConfig\n        ]);\n    }\n    getNetworkConfig(chainId) {\n        const networks = {\n            '0x1': {\n                chainId: '0x1',\n                chainName: 'Ethereum Mainnet',\n                nativeCurrency: {\n                    name: 'Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://mainnet.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://etherscan.io'\n                ]\n            },\n            '0x5': {\n                chainId: '0x5',\n                chainName: 'Goerli Testnet',\n                nativeCurrency: {\n                    name: 'Goerli Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://goerli.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://goerli.etherscan.io'\n                ]\n            },\n            '0xaa36a7': {\n                chainId: '0xaa36a7',\n                chainName: 'Sepolia Testnet',\n                nativeCurrency: {\n                    name: 'Sepolia Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://sepolia.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://sepolia.etherscan.io'\n                ]\n            }\n        };\n        return networks[chainId];\n    }\n    getProvider() {\n        return this.provider;\n    }\n    getSigner() {\n        return this.signer;\n    }\n    constructor(){\n        this.provider = null;\n        this.signer = null;\n    }\n}\nconst walletManager = new WalletManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/wallet.ts\n");
=======
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletManager: () => (/* binding */ WalletManager),\n/* harmony export */   walletManager: () => (/* binding */ walletManager)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @metamask/detect-provider */ \"(ssr)/./node_modules/@metamask/detect-provider/dist/index.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass WalletManager {\n    async connect() {\n        try {\n            // Detect MetaMask provider\n            const ethereum = await _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default()();\n            if (!ethereum) {\n                throw new Error('MetaMask not found! Please install MetaMask.');\n            }\n            // Request account access\n            const accounts = await ethereum.request({\n                method: 'eth_requestAccounts'\n            });\n            if (!accounts || accounts.length === 0) {\n                throw new Error('No accounts found!');\n            }\n            const account = accounts[0];\n            // Create provider and signer\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            this.signer = await this.provider.getSigner();\n            return {\n                isConnected: true,\n                address: account,\n                provider: this.provider,\n                signer: this.signer\n            };\n        } catch (error) {\n            console.error('Error connecting wallet:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        this.provider = null;\n        this.signer = null;\n        return {\n            isConnected: false,\n            address: null,\n            provider: null,\n            signer: null\n        };\n    }\n    async getBalance(address) {\n        if (!this.provider) {\n            throw new Error('Provider not connected');\n        }\n        const balance = await this.provider.getBalance(address);\n        return ethers__WEBPACK_IMPORTED_MODULE_2__.formatEther(balance);\n    }\n    async switchNetwork(chainId) {\n        if (!this.provider) {\n            throw new Error('Provider not connected');\n        }\n        try {\n            await this.provider.send('wallet_switchEthereumChain', [\n                {\n                    chainId\n                }\n            ]);\n        } catch (error) {\n            // If the network doesn't exist, add it\n            if (error.code === 4902) {\n                await this.addNetwork(chainId);\n            } else {\n                throw error;\n            }\n        }\n    }\n    async addNetwork(chainId) {\n        const networkConfig = this.getNetworkConfig(chainId);\n        await this.provider?.send('wallet_addEthereumChain', [\n            networkConfig\n        ]);\n    }\n    getNetworkConfig(chainId) {\n        const networks = {\n            '0x1': {\n                chainId: '0x1',\n                chainName: 'Ethereum Mainnet',\n                nativeCurrency: {\n                    name: 'Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://mainnet.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://etherscan.io'\n                ]\n            },\n            '0x5': {\n                chainId: '0x5',\n                chainName: 'Goerli Testnet',\n                nativeCurrency: {\n                    name: 'Goerli Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://goerli.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://goerli.etherscan.io'\n                ]\n            },\n            '0xaa36a7': {\n                chainId: '0xaa36a7',\n                chainName: 'Sepolia Testnet',\n                nativeCurrency: {\n                    name: 'Sepolia Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                },\n                rpcUrls: [\n                    'https://sepolia.infura.io/v3/'\n                ],\n                blockExplorerUrls: [\n                    'https://sepolia.etherscan.io'\n                ]\n            }\n        };\n        return networks[chainId];\n    }\n    getProvider() {\n        return this.provider;\n    }\n    getSigner() {\n        return this.signer;\n    }\n    constructor(){\n        this.provider = null;\n        this.signer = null;\n    }\n}\nconst walletManager = new WalletManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/wallet.ts\n");
>>>>>>> ecef4e6791da9a7e643a6c1cebbeb652e8a15558:.next/server/_ssr_src_lib_wallet_ts.js

/***/ })

};
;